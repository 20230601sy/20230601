package N02_스트림;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class S04_Sample04 {

	public static void main(String[] args) {
		List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);
//		System.out.println(list.stream().findFirst()); // 스트림에 첫번째꺼 반환, Optional[1]
		Optional<Integer> number = list.stream().filter(n->n>10).findFirst();
		
//		if(number.isPresent())
//			System.out.println(number.get());
//		else
//			System.out.println("없음");
		
//		System.out.println(number.orElse(-1)); // -1, 없으니까!!!
		
		/*
		 * IntStream 처럼
		 * Optional 제네릭 안 쓰고 하는 건 
		 * OptionalInt, OptionalLong, OptionalDouble 같은 게 있음
		 */
		
		/*
		 * 집계 메서드
		 * sum : 합계 구해주는 메서드
		 */
		int sum = list.stream().mapToInt(Integer::intValue).sum();
//		System.out.println(sum); // 15
		
		OptionalDouble avg = list.stream().mapToDouble(Integer::doubleValue).average();
		// mapToDouble(Integer::doubleValue) ㄷㄷ List 제네릭이 Integer
//		System.out.println(avg.orElse(0.0)); // 3.0
		
		
		// 605p 그룹화
		List<String> names = Arrays.asList("Aaaa", "Bbb", "Aaa", "Bcc", "Ccc", "Cdd");
		Map<Character, List<String>> group = names.stream().collect(Collectors.groupingBy(str->str.charAt(0)));
//		System.out.println(group); // {A=[Aaaa, Aaa], B=[Bbb, Bcc], C=[Ccc, Cdd]}
		
		int[] data = {5, 6, 4, 2, 3, 1, 1, 2, 2, 4, 8};
		Integer[] data1 = {5, 6, 4, 2, 3, 1, 1, 2, 2, 4, 8};
		List<Integer> list1 = new ArrayList<>(Arrays.asList(data1));
		// 짝수만 중복제거해서 내림차순 정렬한 결과를 result 배열에 저장후 출력
		Stream<Integer> s = list1.stream().filter(n->n%2==0).distinct().sorted(Comparator.reverseOrder());
		System.out.println("걍 출력");
		s.forEach(System.out::println);
		List<Integer> list2 = list1.stream()
									.filter(n->n%2==0)
									.distinct()
									.sorted(Comparator.reverseOrder())
									.collect(Collectors.toList());
		System.out.println("list에 저장한 결과 : " + list2);
		Integer[] newData = list1.stream()
									.filter(n->n%2==0)
									.distinct()
									.sorted(Comparator.reverseOrder())
									.toArray(Integer[]::new);
		System.out.println("Integer[]에 저장한 결과 : " + Arrays.toString(newData));
		int[] result = Arrays.stream(data)	// 배열을 스트림 IntStream
							.boxed()		// Stream<Integer> 가 됨.
							.filter(n->n%2==0)
							.distinct()
							.sorted(Comparator.reverseOrder())
							.mapToInt(Integer::intValue) // Stream<Integer> → IntStream으로 변환
							.toArray();		// int[] 배열로 리턴
		System.out.println("int[]에 저장한 결과 : " + Arrays.toString(result));
	}

}
