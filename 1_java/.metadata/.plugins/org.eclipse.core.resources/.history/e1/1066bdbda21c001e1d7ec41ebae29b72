/*
 * 오늘도 Java 총정리 복습~
 */
package N01_복습;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Test02 {

	public static void main(String[] args) {
		System.out.println("문제 1 ========================================");
		/*
		 * 다음은 회문수를 구하는 프로그램이다
		 * 회문수란 숫자를 거꾸로 읽어도 앞으로 읽는 것과 같은 수를 말한다
		 * 예를 들면 12321 이나 13531 같은 수를 말한다. 
		 * 숫자를 입력받아 회문수인지 아닌지 판별하는 프로그램을 완성하시오
		 */
		Scanner sc = new Scanner(System.in);
		System.out.print("판별한 숫자를 입력하세요 : ");
//		String numStr = sc.next();
//		Boolean isRoundNum = true;
//		int numLen = numStr.length();
//		for(int i=0; i<numLen/2; i++) {
//			if(numStr.charAt(i) != numStr.charAt(numLen-1-i)) {
//				isRoundNum = false;
//				break;
//			}
//		}
//		System.out.println(numStr + "는 회전수" + (isRoundNum ? "입니다." : "가 아닙니다."));
		
		int num = 12321; // sc.nextInt();
		int tmp = num;
		int revNum = 0;
		while(tmp>0) {
			revNum = revNum*10 + tmp%10;
			tmp = tmp/10;
		}
		System.out.println(num + "는 회전수" + (num==revNum ? "입니다." : "가 아닙니다."));
		
		System.out.println("문제 2 ========================================");
		int[] answer = { 1, 4, 4, 3, 1, 4, 4, 2, 1, 3, 2};
		int[] counter = new int[4];
		/*
		 * 배열에 담긴 데이터를 읽고 각 숫자의 개수를 세어서 개수만큼 *를 찍어서 그래프를 그리는 프로그램
		 * 실행 결과
		 * 1 : ***
		 * 2 : **
		 * 3 : **
		 * 4 : ****
		 */
		for(int i=0; i<answer.length; i++)
			counter[answer[i]-1]++;
		
		for(int i=0; i<counter.length; i++) {
			System.out.print((i+1) + " : ");
			for(int j=0; j<counter[i]; j++)
				System.out.print("*");
			System.out.println();
		}
		
		System.out.println("문제 3 ========================================");
		int[] coinUnit = { 500, 100, 50, 10 }; // 동전의 단위
		int[] coin = { 5, 5, 5, 5 }; // 단위별 동전의 개수
		int money;
		/*
		 * 거슬러줄 금액을 입력받아 계산한다
		 * 보유한 동전의 개수로 거스름돈을 지불할 수 없으면
		 * '거스름 돈이 부족합니다.'라고 출력하고 종료한다
		 * 지불할 돈이 충분히 있으면 거스름돈을 지불한 만큼 가진 돈에서 빼고
		 * 남은 동전의 개수를 화면에 출력한다.
		 * // 출력 결과
		 * 거스름 받을 금액을 입력하세요 : 2680
		 * money=2680
		 * 500원 : 5
		 * 100원 : 1
		 * 50원 : 1
		 * 10원 : 3
		 * =남은 동전의 개수=
		 * 500 : 0
		 * 100 : 4
		 * 50 : 4
		 * 10 : 2
		 */
		System.out.print("거스름 받을 금액을 입력하세요 : ");
		money = 2680; // sc.nextInt();
		System.out.println("money=" + money);
		int[] payCoin = new int[coin.length];
		for(int i=0; i<coin.length; i++) {
			payCoin[i] = money/coinUnit[i];
			if(payCoin[i] > coin[i])
				payCoin[i] = coin[i];
			money -= payCoin[i]*coinUnit[i];
		}
		if(money>0)
			System.out.println("거스름 돈이 부족합니다.");
		else {
			for(int i=0; i<coin.length; i++)
				System.out.println(coinUnit[i]+"원 : "+payCoin[i]);
			System.out.println("=남은 동전의 개수=");
			for(int i=0; i<coin.length; i++)
				System.out.println(coinUnit[i]+" : "+(coin[i]-payCoin[i]));			
		}
		
		System.out.println("문제 4 ========================================");
		/* 
		 * Student 클래스를 구현하고,
		 * 정의한 클래스에 다음과 같이 정의된 두 개의 매서드 getTotal()과 getAverage()를 추가하시오
		 * 1. 메서드명 : getTotal
		 * 기능 : 국어 영어 수학의 점수를 모두 더해서 반환한다
		 * 반환타입 : int
		 * 매개변수 없음
		 * 2. 메서드명 : getAverage
		 * 기능 : 총점을 과목수로 나눈 평균을 구한다
		 * 반환타입 : double
		 * 매개변수 없음
		 */
		Student4 s = new Student4();
        
        s.name = "홍길동"; 
        s.ban = 1;
        s.no = 1;
        s.kor = 100;
        s.eng = 60;
        s.math = 76;
        
        System.out.println("이름 : "+s.name); 
        System.out.println("총점 : "+s.getTotal()); 
        System.out.println("평균 : "+s.getAverage()); 
        
        System.out.println("문제 5 ========================================");
        Student5 s5 = new Student5("홍길동", 1, 1, 100, 60, 76);
        s5.info();
		/* 
		 * 위의 코드가 다음과 같은 실행결과를 얻도록 Student 클래스를 완성
		 * 이름 : 홍길동
		 * 반 : 1
		 * 번호 : 1
		 * 국어 : 100
		 * 영어 : 60
		 * 수학 : 76
		 * 총점 : 236
		 * 평균 : 78.7
		 */
        
        System.out.println("문제 6 ========================================");
        /*
         * 다음 중 생성자에 대한 설명으로 옳지 않은 것을 모두 고르시오
         * a. 모든 생성자의 이름은 클래스의 이름과 동일해야 한다
         * b. 생성자는 객체를 생성하기 위한 것이다
         * c. 클래스에는 생성자가 반드시 하나 이상 있어야 한다
         * d. 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다
         * e. 생성자는 오버로딩 할 수 없다
         * 답은 b, c, e // b가 애매한데 정확하게는 틀렸다고 하심, 객체를 생성해주는 거가 new이고, 객체를 초기화하기 위한 게 생성자!
         */
        
        System.out.println("문제 7 ========================================");
        /*
         * 다음 중 오버로딩이 성립하기 위한 조건이 아닌 것을 모두 고르시오
         * 1. 메서드의 이름이 같아야 한다
         * 2. 매개 변수의 개수나 타입이 달라야 한다
         * 3. 리턴타입이 달라야 한다
         * 4. 매개변수 이름이 달라야 한다
         * 답은 3, 4 // 4번 얘기는 void method(int score), void method(int num) 얘기임 ㄷㄷ
         */
        
        System.out.println("문제 8 ========================================");
        int[] arr = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        System.out.println(Arrays.toString(arr));
        
        int[] result = shuffle8(arr);
        System.out.println(Arrays.toString(result));
        /*
         * 메서드명 : shuffle
         * 기능 : 주어진 배열에 담긴 값의 위치를 바꾸는 작업을 반복하여 뒤섞이게 한 후 처리한 배열을 반환한다.
         * 반환타입 : int[]
         * 매개변수 : 정수값이 담긴 배열
         */
        
        System.out.println("문제 9 ========================================");
        MyTv9 t = new MyTv9();
        
        t.channel = 100;
        t.volume = 0;
        
        System.out.println("CH:" + t.channel + ", VOL:" + t.volume);
        
        t.channelDown();
        t.volumeDown();
        System.out.println("CH:" + t.channel + ", VOL:" + t.volume);
        
        t.volume = 100;
        t.channelUp();
        t.volumeUp();
        System.out.println("CH:" + t.channel + ", VOL:" + t.volume);
		/* 
		 * 위의 코드가 다음과 같은 실행결과를 얻도록 MyTv 클래스를 완성
		 * CH:100, VOL:0
		 * CH:99, VOL:0
		 * CH:100, VOL:100
		 */
        
        System.out.println("문제 10 =======================================");
        // 상속 생성자 문제
        System.out.println("문제 11 =======================================");
        // 상속 형변환 문제
        A a = new A11();
        A21 a21 = new A21();
        A11 a11 = new A11();
        a = (A) a11; // 가능
        a = a11;	 // 가능
        A11 b = (A11) a; // 가능 그외에 올라갔던 것만 내려올수 있다 등등등
        
        System.out.println("문제 12 =======================================");
        Buyer12 b12 = new Buyer12();
        
        b12.buy(new Tv12());
        b12.buy(new Computer12());
        b12.buy(new Tv12());
        b12.buy(new Audio12());
        b12.buy(new Computer12());
        b12.buy(new Computer12());
        b12.buy(new Computer12());
        
        b12.summary();
        /* 
		 * 다음은 물건을 구입하는 사람을 정의한 클래스이다
		 * 이 Buyer클래스는 멤버변수(돈) (cart)로 돈과 장바구니를 가지고 있다
		 * 제품을 구입하는 기능의  buy 메서드와 장바구니에 구입한 물건을 추가하는 add메서드
		 * 구입한 물건의 목록과 사용금액 그리고 남은 금액을 출력하는 summary 메서드를 완성하시오 .
		 * 1. 메서드명 : buy 
		 * 기 능 : 지정된 물건을 구입한다 가진 돈(돈) 에서 물건의 가격을 빼고, 장바구니 (cart)에 담는다
		 * 만일 가진 돈이 물건의 가격보다 적다면 바로 종료한다.
		 * 반환타입  : 없음
		 * 매개변수  : Product p - 구입할 물건
		 * 2. 메서드명 : add 
		 * 기 능 : 지정된 물건을 장바구니에 담는다.
		 * 만일 장바구니에 담을 공간이 없으면 장바구니의 크기를 2배로 늘린 다음에 담는다
		 * 반환타입 : 없음
		 * 매개변수  : Product p - 구입할 물건
		 * 3. 메서드명 : summary 
		 * 기 능 : 구입한 물건의 목록과 사용금액 남은 금액을 출력한다
		 * 반환타입 : 없음
		 * 매개변수 : 없음
		 */
        
        System.out.println("문제 13 =======================================");
        /*
         * class Outer{
         * 	class Inner {
         *   int iv = 100;
         *  }
         * }
         * 내부 클래스, main클래스에서 iv 값을 출력하시오
         */
        Outer13 o = new Outer13();
        Outer13.Inner i = o.new Inner();
        System.out.println(i.iv);
        
        System.out.println("문제 14 =======================================");
        Outer14 o14 = new Outer14();
        Outer14.Inner i14 = o14.new Inner();
        i14.method();
        
        System.out.println("문제 15 =======================================");
        // 예외처리, 숫자가 아닌 이상한 거 입력하면 잘못입력했습니다. 다시 숫자 입력받을 수 있도록 처리
		// 1~100 사이의 임의의 값을 얻어서 answer에 저장한다
		int answer15 = (int) (Math.random() * 100) + 1;
		int input = 0; // 사용자입력을 저장할 공간
		int count = 0; // 시도횟수를 세기 위한 변수

//		while (true) {
//			count++;
//			System.out.print("1과 100사이의 값을 입력하세요 :");
//			try{
//				input = new Scanner(System.in).nextInt();
//			} catch (Exception e) {
//				System.out.println("잘못입력했습니다~");
//				continue;
//			}
//
//			if (answer15 > input) {
//				System.out.println("더 큰 수를 입력하세요.");
//
//			} else if (answer15 < input) {
//				System.out.println("더 작은 수를 입력하세요.");
//
//			} else {
//				System.out.println("맞췄습니다.");
//				System.out.println("시도횟수는 " + count + "번입니다.");
//				break;
//			}
//		}
		
		System.out.println("문제 16 =======================================");
		ArrayList<Integer> list1 = new ArrayList<>();
		ArrayList<Integer> list2 = new ArrayList<>();

		ArrayList<Integer> kyo = new ArrayList<>(); // 교집합
		ArrayList<Integer> cha = new ArrayList<>(); // 차집합
		ArrayList<Integer> hap = new ArrayList<>(); // 합집합

		list1.add(1); list1.add(2); list1.add(3); list1.add(4);
		list2.add(3); list2.add(4); list2.add(5); list2.add(6);

		// 알맞은 코드를 넣어 완성하시오
		kyo.addAll(list1);
		kyo.retainAll(list2);
		cha.addAll(list1);
		cha.removeAll(list2);
		hap.addAll(cha);
		hap.addAll(list2);

		System.out.println("list1=" + list1);
		System.out.println("list2=" + list2);
		System.out.println("kyo=" + kyo);
		System.out.println("cha=" + cha);
		System.out.println("hap=" + hap);
		
		System.out.println("문제 17 =======================================");
		// Thread 4가지 방법으로 구현
		Thread t1 = new Thread17();
		Thread t2 = new Thread(new Runnable17());
		Thread t3 = new Thread(){
			@Override
			public void run() {
				System.out.println("(3) 익명클래스 구현");
			}
		};
		t1.start();
		t2.start();
		t3.start();
		
	}
	
	public static int[] shuffle8(int[] arr) {
		int[] result = new int[arr.length];
//		boolean isHere;
//		for(int i=0; i<result.length; i++) {
//			do {
//				isHere = false;
//				result[i] = arr[(int)(Math.random()*arr.length)];
//				for(int j=0; j<i; j++)
//					if(result[i] == result[j])
//						isHere = true;
//			} while(isHere);
//		}
		for(int i=0; i<result.length; i++)
			result[i] = arr[i];
		for(int i=0; i<result.length; i++) {
			int j = (int)(Math.random()*arr.length);
			int tmp = result[i];
			result[i] = result[j];
			result[j] = tmp;
		}
		return result;
	}
}
class A{}
class A1 extends A{}
class A2 extends A{}
class A11 extends A1{}
class A21 extends A2{}
class Student4 {
    String name; 
    int ban;
    int no;
    int kor, eng, math;
    public int getTotal() {
    	return kor+eng+math;
    }
    public double getAverage() {
    	return Math.round(getTotal()*10/3.0)/10.0;
    }
}

class Student5 {
    String name; 
    int ban;
    int no;
    int kor, eng, math;
    
    public Student5(String name, int ban, int no, int kor, int eng, int math) {
		this.name = name;
		this.ban = ban;
		this.no = no;
		this.kor = kor;
		this.eng = eng;
		this.math = math;
	}

    public int getTotal() {
    	return kor+eng+math;
    }
    public double getAverage() {
    	return Math.round(getTotal()*10/3.0)/10.0;
    }

	public void info() {
		System.out.println("이름 : " + name);
		System.out.println("반 : " + ban);
		System.out.println("번호 : " + no);
		System.out.println("국어 : " + kor);
		System.out.println("영어 : " + eng);
		System.out.println("수학 : " + math);
		System.out.println("총점 : " + getTotal()); 
        System.out.println("평균 : " + getAverage()); 
	}
    
}

class MyTv9 {
	boolean isPowerOn;
	int channel;
	int volume;
	final int MAX_VOLUME = 100;
	final int MIN_VOLUME = 0;
	final int MAX_CHANNEL = 100;
	final int MIN_CHANNEL = 1;

	void turnOnOff() {
		// (1) isPowerOn의 값이 true면 false로 , false면 true로 바꾼다
		isPowerOn = !isPowerOn;
	}

	void volumeUp() {
		// (2) volume의 값이 MAX_VOLUME보다 작을 때만 값을 1 증가시킨다
		if (volume < MAX_VOLUME)
			volume++;
	}

	void volumeDown() {
		// (3) volume의 값이 MIN_VOLUME보다 클 때만 값을 1 감소시킨다
		if (volume > MIN_VOLUME)
			volume--;
	}

	void channelUp() {
		// channel이 MAX_CHANNEL이면, channel의 값을 MIN_CHANNEL로 바꾼다
		// (4) channel의 값을 1 증가시킨다
		if (channel == MAX_CHANNEL)
			channel = MIN_CHANNEL;
		else
			channel++;
	}

	void channelDown() {
		// channel이 MIN_CHANNEL이면, channel의 값을 MAX_CHANNEL로 바꾼다
		// (5) channel의 값을 1 감소시킨다
		if (channel == MIN_CHANNEL)
			channel = MAX_CHANNEL;
		else
			channel--;
	}
}

class Product12 {
	int price; // 제품의 가격

	Product12(int price) {
		this.price = price;
	}
}

class Tv12 extends Product12 {
	Tv12() {
		super(100);
	}

	public String toString() {
		return "Tv";
	}
}

class Computer12 extends Product12 {
	Computer12() {
		super(200);
	}

	public String toString() {
		return "Computer";
	}
}

class Audio12 extends Product12 {
	Audio12() {
		super(50);
	}

	public String toString() {
		return "Audio";
	}
}

class Buyer12 {
	int money = 1000;
	Product12[] cart = new Product12[3]; // 구입한 제품을 저장하기 위한 배열
	int i = 0; // Product cart index 배열 에 사용될

	void buy(Product12 p) {
		/*
		 * 아래에 맞게 코드를 작성하시오
		 * 1.1 . 가진 돈과 물건의 가격을 비교해서 가진 돈이 적으면 메서드를 종료한다
		 * 1.2 . 가진 돈이 충분하면 제품의 가격을 가진 돈에서 빼고
		 * 1.3 . 장바구니에 구입한 물건을 담는다 (add메서드 호출)
		 */
		if(money < p.price) {
			System.out.println("잔액이 부족하여 " + p + "를 살수 없습니다.");
			return;
		}
		money -= p.price;
		add(p);
	}

	void add(Product12 p) {
		/*
		 * 아래에 맞게 코드를 작성하시오
		 * 1.1 i의 값이 장바구니의 크기보다 같거나 크면 
		 * 1.1.1 기존의 장바구니보다 2배 큰 새로운 배열을 생성한다
		 * 1.1.2 기존의 장바구니의 내용을 새로운 배열에 복사한다
		 * 1.1.3 새로운 장바구니와 기존의 장바구니를 바꾼다
		 * 1.2 물건을 장바구니(cart) 에 저장한다 그리고 i의 값을 1 증가시킨다
		 */
		if(i>=cart.length)
			cart = Arrays.copyOf(cart, cart.length*2);
		cart[i++] = p;
	}

	void summary() {
		/*
		 * 아래에 맞게 코드를 작성하시오
		 * 1.1 . 장바구니에 담긴 물건들의 목록을 만들어 출력한다
		 * 1.2 . 장바구니에 담긴 물건들의 가격을 모두 더해서 출력한다
		 * 1.3 . 물건을 사고 남은 금액(돈) 를 출력한다
		 */
		System.out.print("구입한 물건 : ");
		int totalPrice = 0;
		for(int k=0; k<i; k++) {
			System.out.print(cart[k]+",");
			totalPrice += cart[k].price;
		}
		System.out.println();
		System.out.println("사용한 금액 : " + totalPrice);
		System.out.println("남은 금액 : " + money);
		
	}
}

class Outer13{
	class Inner {
		int iv = 100;
	}
}

class Outer14{
	int value = 10;
	class Inner {
		int value = 20;
		void method() {
			int value = 30;
			System.out.println(value);
			System.out.println(this.value);
			System.out.println(Outer14.this.value);
		}
	}
}

class Thread17 extends Thread{

	@Override
	public void run() {
		System.out.println("(1) Thread 클래스 상속 받아서 구현");
	}
	
}

class Runnable17 implements Runnable{

	@Override
	public void run() {
		System.out.println("(2) Runnable 구현");
	}
	
}










